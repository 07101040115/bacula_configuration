#! /usr/local/bin/python
# Add/remove/update/dump directors
from __future__ import print_function

import sys, os
import optparse
from bacula_tools import *

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Print Bacula configuration.', usage='usage: %prog --(director|fd|sd) hostname ')
parser.add_option('--director', action='store_true',
                   default=False, help='Produce a configuration for the given director')
parser.add_option('--fd', action='store_true',
                   default=False, help='Produce a configuration for the given file daemon')
parser.add_option('--sd', action='store_true',
                   default=False, help='Produce a configuration for the given storage daemon')

keylist = [DIRECTOR, FD, SD]
(args, given_arg) = parser.parse_args()
foo = [x for x in keylist if getattr(args, x)]

if len(foo) != 1:
    print('You must use one, and only one, option\n')
    parser.print_help()
    exit()

if (not given_arg) or not len(given_arg) == 1:
    print('You must supply the name of the configuration host\n')
    parser.print_help()
    exit()

bacula = Bacula_Factory()        # Instantiate our DB connection thingy
# }}}

hostname = given_arg[0].strip()

if args.director:
    # First, the basics
    cf = ConfigFile(BACULA_DIR_CONF)
    d = Director().search(hostname)
    m = Messages().search(id=d[MESSAGES_ID])
    c = Catalog({DIRECTOR_ID: d[ID]}).search()
    print(d,c,m,sep='\n\n')
    # Now, for a little more interesting stuff (and we're cheating hard)
    for id in d.bc.do_sql('SELECT id FROM filesets ORDER BY name'): print( Fileset().search(id=id), '\n')
    for id in d.bc.do_sql('SELECT id FROM schedules ORDER BY name'): print( Schedule().search(id=id), '\n')
    # clients
    for id in d.bc.do_sql('SELECT id FROM clients ORDER BY name'): print( Client().search(id=id), '\n')
    # jobs
    for id in d.bc.do_sql('SELECT id FROM jobs ORDER BY name'): print( Job().search(id=id), '\n')
    # storage
    for id in d.bc.do_sql('SELECT id FROM storage ORDER BY name'): print( Storage().search(id=id), '\n')
    # Pools
    for id in d.bc.do_sql('SELECT id FROM pools ORDER BY name'): print( Pool().search(id=id), '\n')

if args.fd: pass
if args.sd: pass
