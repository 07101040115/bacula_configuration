#! /usr/local/bin/python
# Add/remove/update/dump directors
from __future__ import print_function

import sys, os, optparse, logging
from bacula_tools import *

def reload_director(d):
    '''use bconsole to reload the config'''
    handle = BDirector(d)
    handle.auth()
    handle.send('reload')
    handle.recv_all()
    handle.send('status dir days=')
    handle.recv_all()

def reload_storage():
    '''Restart bacula-sd with appropriate precautions.  Relies on at(1).'''
    atjob = "/tmp/restart_storage.sh"
    cf = ConfigFile(atjob)
    resubmit = cf.close('''
exec > %(atjob)s.log 2>&1
set -x
status=`echo status dir days=0 | bconsole | grep -i "No Jobs running"`
if [ -z "$status" ]
then
  at -f %(atjob)s now + 1 hour
  exit
fi
service bacula-sd restart
/bin/rm %(atjob)s
''' % locals())
    if resubmit: os.system("at -f %(atjob)s now + 1 minute" % locals())
    return

# Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Print Bacula configuration.', usage='usage: %prog --(director|fd|sd) hostname [subsidiary hostnames]')
parser.add_option('--bconsole', action='store_true',
                   default=False, help='Produce a configuration for using bconsole')
parser.add_option('--director', action='store_true',
                   default=False, help='Produce a configuration for the given director')
parser.add_option('--fd', action='store_true',
                   default=False, help='Produce a configuration for the given file daemon')
parser.add_option('--sd', action='store_true',
                   default=False, help='Produce a configuration for the given storage daemon')
parser.add_option('-d', '--debug', action='store_true',
                   default=False, help='Enable debugging output')

keylist = [DIRECTOR, FD, SD, BCONSOLE]
(args, given_arg) = parser.parse_args()
foo = [x for x in keylist if getattr(args, x)]

if len(foo) != 1:
    print('You must use one, and only one, option\n')
    parser.print_help()
    exit()

if (not given_arg) or not len(given_arg) > 0:
    print('You must supply the name of the configuration host\n')
    parser.print_help()
    exit()

if len(given_arg) > 1 and (not args.bconsole):
    print('Only the bconsole option accepts multiple hostames\n')
    parser.print_help()
    exit()

if args.debug: logging.basicConfig(level=logging.DEBUG)
else: logging.basicConfig(level=logging.WARNING)

bacula = Bacula_Factory()        # Instantiate our DB connection thingy
def query_id_thing(sql, obj, output, fun=None, args=(), **kwargs):
    logging.debug('%s:%s:%s:%s', sql, obj, args, kwargs)
    for id in bacula.do_sql(sql, args):
        o = obj(**kwargs)
        o.search(id)
        if fun:
            output.write(getattr(o, fun)(), '\n')
        else:
            output.write(o, '\n')
    return

hostname = given_arg[0].strip()

if args.director:               # Director configuration stanzas

    # First, the basics
    cf = ConfigFile(BACULA_DIR_CONF)
    d = Director().search(hostname)
    cf.write(d, '\n')
    c = Catalog({DIRECTOR_ID: d[ID]}).search()
    cf.write(c, '\n')
    query_id_thing('SELECT messages_id FROM messages_link where ref_id = %s and link_type = %s', Messages, cf, args=(d[ID], d.IDTAG))
    # Now, for a little more interesting stuff (and we're cheating hard)
    query_id_thing('SELECT id FROM filesets ORDER BY name', Fileset, cf)
    query_id_thing('SELECT id FROM schedules ORDER BY name', Schedule, cf)
    # clients
    query_id_thing('SELECT id FROM clients ORDER BY name', Client, cf, director_id = d[ID])
    # jobs
    query_id_thing('SELECT id FROM jobs WHERE jobdef=1 ORDER BY name', JobDef, cf)
    query_id_thing('SELECT id FROM jobs WHERE NOT jobdef=1 OR jobdef IS NULL ORDER BY name', Job, cf)
    # storage
    query_id_thing('SELECT id FROM storage ORDER BY name', Storage, cf, director_id = d[ID])
    # Pools
    query_id_thing('SELECT id FROM pools ORDER BY name', Pool, cf)
    # Consoles
    query_id_thing('SELECT id FROM consoles ORDER BY name', Console, cf)
    if cf.close(): reload_director(d)

if args.fd:                     # File Daemon configuration stanzas

    cf = ConfigFile(BACULA_FD_CONF)
    cl = Client().search(hostname)
    cf.write(cl.fd(), '\n')

    query_id_thing('SELECT director_id FROM pwords where obj_id = %s and obj_type = %s AND director_type = %s ORDER BY director_id',
                   Director, cf, fun='fd', args= (cl[ID], cl.IDTAG, Director.IDTAG), client_id = cl[ID])


    query_id_thing('SELECT director_id FROM pwords where obj_id = %s and obj_type = %s AND director_type = %s ORDER BY director_id',
                   Console, cf, fun='fd',
                   args = (cl[ID], cl.IDTAG, Console.IDTAG), client_id = cl[ID])

    query_id_thing('SELECT messages_id FROM messages_link WHERE ref_id = %s AND link_type = %s',
                   Messages, cf,
                   args = (cl[ID], cl.IDTAG))

    if cf.close(): pass

if args.sd:
    cf = ConfigFile(BACULA_SD_CONF)
    sd = Storage().search(hostname)
    cf.write(sd.sd(), '\n')

    query_id_thing('SELECT director_id FROM pwords where obj_id = %s and obj_type = %s AND director_type = %s ORDER BY director_id',
                   Director, cf, fun='fd',
                   args = (sd[ID], sd.IDTAG, Director.IDTAG), client_id = sd[ID])

    query_id_thing('SELECT director_id FROM pwords where obj_id = %s and obj_type = %s AND director_type = %s ORDER BY director_id',
                   Console, cf, fun='fd',
                   args = (sd[ID], sd.IDTAG, Console.IDTAG), client_id = sd[ID])
    
    query_id_thing('SELECT device_id FROM device_link WHERE storage_id = %s',
                   Device, cf, args = (sd[ID],))
        
    query_id_thing('SELECT messages_id FROM messages_link WHERE ref_id = %s AND link_type = %s',
                   Messages, cf, args = (sd[ID], sd.IDTAG))

    if cf.close(): pass

if args.bconsole:               # bconsole setup
    print('setting up bconsole')
    # First, the basics
    cf = ConfigFile(BCONSOLE_CONF)
    for hostname in given_arg:
        d = Director().search(hostname.strip())
        if not d[bacula_tools.ID]: d = Console().search(hostname.strip())
        cf.write(d.bconsole(), '\n')
    cf.close()
