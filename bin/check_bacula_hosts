#!/usr/local/bin/python
'''Report on the status of all of the clients. '''
from __future__ import print_function
import bacula_tools

bc = bacula_tools.Bacula_Factory()

sql = 'select director_id from %s where %s = %%s' % (bacula_tools.PasswordStore.table, bacula_tools.PasswordStore.column1)

def check_group(obj, comm):
    base_sql = 'select director_id from %s where %s = %%s'
    get_pass = False
    if obj == bacula_tools.Client:
        ps = bacula_tools.PasswordStore
        sql = base_sql % (ps.table, ps.column1)
        get_pass = True
    elif obj == bacula_tools.Storage:
        ps = bacula_tools.StoragePasswordStore
        sql = base_sql % (ps.table, ps.column1)
        get_pass = True

    for thing in bc.do_sql('SELECT id from %s order by id ASC' % obj.table):
        c = obj({bacula_tools.ID: thing[0]}).search()
        try:
            if get_pass:
                row = bc.do_sql(sql, c[bacula_tools.ID])[0] # Grab the first password available
                password = ps(c[bacula_tools.ID], row[0])
                d = bacula_tools.Director().search(row[0])
                connection = comm(c[bacula_tools.ADDRESS], password.password, d[bacula_tools.NAME])
            else:
                connection = comm(c)
            connection.auth()
            result = connection.version()
            print(result)
        except Exception as e:
            print('%s: connection refused (firewall or dead)' % c[bacula_tools.NAME])

check_group(bacula_tools.Client, bacula_tools.FDaemon)

check_group(bacula_tools.Storage, bacula_tools.SDaemon)

check_group(bacula_tools.Director, bacula_tools.BDirector)

exit()
