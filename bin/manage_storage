#! /usr/local/bin/python
# Add/remove/update/dump storage

import sys, os
import optparse
from bacula_tools import *

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Manage Bacula storage.', usage='usage: %prog [options] [storage]')
parser.add_option('--create', action='store_true',
                   default=False, help='Create the given storage')
parser.add_option('--delete', action='store_true',
                   default=False, help='Delete the given storage')
parser.add_option('--rename', metavar='NEW_NAME',
                   help='Rename the given storage')
parser.add_option('--list', action='store_true',
                   default=False, help='List the available storage')

group = optparse.OptionGroup(parser, "Setters",
                             "These options are used for setting various values.  "
                             "Use an empty string, e.g. '' to unset the value for strings variables.  "
                             "You should be aware that no sanity checking is done here, so it is quite possible "
                             "to break your configuration while using them.  Caveat emptor."
                             )
keylist = [x for x in Storage.NULL_KEYS if not x == ID]
for key in keylist: group.add_option('--' + key)


parser.add_option_group(group)

(args, storage_arg) = parser.parse_args()
bacula = Bacula_Factory()        # Instantiate our DB connection thingy

if args.delete and (args.create or args.set or args.rename):
    bacula.die('','If you delete then there is no sense in doing anything else.',
               "You didn't think this one out very well, did you?.")

# }}}

if args.list:
    print bacula.formatted_query_result('select name from %s order by name' % STORAGE, infix='\n')
    if not storage_arg: exit()
if not storage_arg:
    parser.print_help()
    exit()

s = Storage()
if args.create: s._set_name(storage_arg[0])

s.search(storage_arg[0])
if not s[ID]:
    print 'No such storage: %s' % storage_arg[0],
    exit()

if args.delete:
    s.delete()
    print 'Deleted storage:', storage_arg[0]
    exit()                      # Nothing to print out now
    
if args.rename: s.change_name(args.rename)
for key in keylist:
    if key in [AUTOCHANGER, ALLOWCOMPRESSION]: continue
    value = getattr(args, key)
    if value == None: continue
    try: s._set(key, value)
    except: pass
if not args.autochanger == None: s._set(AUTOCHANGER, args.autochanger, True)
if not args.allowcompression == None: s._set(ALLOWCOMPRESSION, args.ALLOWCOMPRESSION, True)


print 'Director config\n', s, '\n'
exit()
