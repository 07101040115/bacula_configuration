#! /usr/local/bin/python
# Add/remove/update/dump jobs
from __future__ import print_function

import sys, os
import optparse
from bacula_tools import *

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Manage Bacula jobs.', usage='usage: %prog [options] [job]')
parser.add_option('--create', action='store_true',
                   default=False, help='Create the given job')
parser.add_option('--delete', action='store_true',
                   default=False, help='Delete the given job')
parser.add_option('--rename', metavar='NEW_NAME',
                   help='Rename the given job')
parser.add_option('--list', action='store_true',
                   default=False, help='List the available jobs')

group = optparse.OptionGroup(parser, "Setters",
                             "These options are used for setting various values.  "
                             "Use an empty string, e.g. '' to unset the value for strings variables.  "
                             "You should be aware that no sanity checking is done here, so it is quite possible "
                             "to break your configuration while using them.  Caveat emptor."
                             )
#keylist = [x for x in Job.NULL_KEYS ] + [REPLACE, JOBDEF]
for key in Job.NULL_KEYS:
    if not type(key) == str: key=key[0]
    group.add_option('--' + key)
for key in Job.INT_KEYS:
    if not type(key) == str: key=key[0]
    group.add_option('--' + key, type='int', help='takes an integer value')
for key in Job.TRUE_KEYS + Job.FALSE_KEYS:
    if not type(key) == str: key=key[0]
    group.add_option('--' + key, help='takes a boolean value')
for key in Job.REFERENCE_KEYS:
    k = key.replace('_id','')
    if 'pool' in k:
        group.add_option('--' + k, help='The name of a Pool resource')
    else:
        group.add_option('--' + k, help='The name of a %s resource' % k.capitalize())
group.add_option('--job', help='The name of the job from which this will take its defaults')
group.add_option('--add-runscript', type='int', help='The number of an existing Run Script to be added to this job')
group.add_option('--del-runscript', type='int', help='The number of an existing Run Script to be removed from this job')
parser.add_option_group(group)

(args, job_arg) = parser.parse_args()
bacula = Bacula_Factory()        # Instantiate our DB connection thingy

if args.delete and (args.create or args.set or args.rename):
    bacula.die('','If you delete then there is no sense in doing anything else.',
               "You didn't think this one out very well, did you?.")

# }}}

if args.list:
    print(bacula.formatted_query_result('select name from %s order by name' % JOBS, infix='\n'))
    if not job_arg: exit()
if not job_arg:
    parser.print_help()
    exit()

s = Job()
if args.create: s._set_name(job_arg[0])

s.search(job_arg[0])
if not s[ID]:
    print('No such joby: %s' % job_arg[0])
    exit()

if args.delete:
    s.delete()
    print('Deleted job:', job_arg[0])
    exit()                      # Nothing to print out now
    
if args.rename: s.change_name(args.rename)
for key in Job.NULL_KEYS + Job.INT_KEYS:
    if not type(key) == str: key=key[0]
    value = getattr(args, key)
    if value == None: continue
    if value == '': value = None
    try: s._set(key, value)
    except: pass

for key in Job.REFERENCE_KEYS:
    if not type(key) == str: key=key[0]
    value = getattr(args, key.replace('_id',''))
    if value == None: continue
    try: s._set(key, value, dereference=True)
    except: pass

for key in Job.TRUE_KEYS + Job.FALSE_KEYS:
    if not type(key) == str: key=key[0]
    value = getattr(args, key)
    if value == None: continue
    try: s._set(key, value, bool=True)
    except: pass

if args.add_runscript:
    runscript = Script({ID: int(args.add_runscript)})
    runscript.search()
    s._add_script(runscript)

if args.del_runscript:
    runscript = Script({ID: int(args.del_runscript)})
    s._delete_script(runscript)

print('Director config\n' + str(s) + '\n')
exit()
