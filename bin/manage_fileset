#! /usr/local/bin/python
# Add/remove/update/dump filesets
from __future__ import print_function

import sys, os
import optparse
from bacula_tools import Fileset, Bacula_Factory, FILESETS, VSSENABLED, IGNORECHANGES, OPTION, ID, set_bool_values

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Manage Bacula filesets.', usage='usage: %prog [options] [fileset]')
parser.add_option('--create', action='store_true', help='Create the given fileset')
parser.add_option('--delete', action='store_true', help='Delete the given fileset')
parser.add_option('--add', action='append', default=[], help='Add argument to the given fileset')
parser.add_option('--option', action='store_true', help='Add/Remove options instead of file entries')
parser.add_option('--exclude', action='store_true', help='Edit the Exclude clause instead of the Include clause')
parser.add_option('--rename', help='Rename the given fileset')
parser.add_option('--remove', action='append', default=[], help='Remove argument from the given fileset')
parser.add_option('--vss', type="string", help='Enable VSS (yes/no)')
parser.add_option('--ignore-changes', type='string', dest='ignore', help='Ignore Fileset Changes (yes/no)')
parser.add_option('--list', action='store_true', help='List the available filesets')

(args, fileset_arg) = parser.parse_args()
bacula = Bacula_Factory()        # Instantiate our DB connection thingy

if args.delete and (args.create or args.add or args.remove or args.rename):
    bacula.die('','If you delete then there is no sense in doing anything else.',
               "You didn't think this one out very well, did you?.")

# }}}
    
if args.list:
    print(bacula.formatted_query_result('select name from %s order by name' % FILESETS, infix='\n'))
    if not fileset_arg: exit()
if not fileset_arg:
    parser.print_help()
    exit()

s = Fileset()
if args.create: s._set_name(fileset_arg[0])

s.search(fileset_arg[0])
if not s[ID]:
    print('No such fileset: %s' % fileset_arg[0])
    exit()

if args.delete:
    s.delete()
    print('Deleted fileset:', fileset_arg[0])
    exit()                      # Nothing to print out now
    
if args.rename: s._set(NAME, args.rename)
if args.vss: set_bool_values('--vss', args.vss, s, VSSENABLED)
if args.ignore: set_bool_values('--ignore-changes', args.ignore, s, IGNORECHANGES)
for line in args.add: s._add_entry(line, args.option and 1 or 0, args.exclude and 1 or 0)
for line in args.remove: s._delete_entry(line)

print('\n',s,'\n')
exit()
