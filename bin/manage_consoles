#! /usr/local/bin/python
# Add/remove/update/dump consoles
from __future__ import print_function

import sys, os
import optparse
from bacula_tools import Console, Bacula_Factory, CONSOLES, ID

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Manage Bacula consoles.', usage='usage: %prog [options] [console]')
parser.add_option('--create', action='store_true',
                   default=False, help='Create the given console')
parser.add_option('--delete', action='store_true',
                   default=False, help='Delete the given console')
parser.add_option('--rename', metavar='NEW_NAME',
                   help='Rename the given console')
parser.add_option('--list', action='store_true',
                   default=False, help='List the available console')

group = optparse.OptionGroup(parser, "Setters",
                             "These options are used for setting various values.  "
                             "Use an empty string, e.g. '' to unset the value for strings variables.  "
                             "You should be aware that no sanity checking is done here, so it is quite possible "
                             "to break your configuration while using them.  Caveat emptor."
                             )
keylist = [x for x in Console.NULL_KEYS if not x == ID]
for key in keylist: group.add_option('--' + key)
parser.add_option_group(group)

(args, console_arg) = parser.parse_args()
bacula = Bacula_Factory()        # Instantiate our DB connection thingy

if args.delete and (args.create or args.set or args.rename):
    bacula.die('','If you delete then there is no sense in doing anything else.',
               "You didn't think this one out very well, did you?.")

# }}}

if args.list:
    print(bacula.formatted_query_result('select name from %s order by name' % CONSOLES, infix='\n'))
    if not console_arg: exit()
if not console_arg:
    parser.print_help()
    exit()

s = Console()
if args.create: s._set_name(console_arg[0])

s.search(console_arg[0])
if not s[ID]:
    print('No such console: %s' % console_arg[0])
    exit()

if args.delete:
    s.delete()
    print('Deleted console:', console_arg[0])
    exit()                      # Nothing to print out now
    
if args.rename: s._set(NAME, args.rename)
generic_option_processor(s, args, keylist)

print(s)
exit()
