#! /usr/local/bin/python
# Add/remove/update/dump clients
from __future__ import print_function

import sys, os
import optparse
from bacula_tools import *
from bacula_tools.util import generic_option_processor

# {{{ Parser configuration and sanity checking.  Also, "bacula" is instantiated in here

parser = optparse.OptionParser(description='Manage Bacula clients.', usage='usage: %prog [options] [client]')
parser.add_option('--create', action='store_true',
                   default=False, help='Create the given client')
parser.add_option('--delete', action='store_true',
                   default=False, help='Delete the given client')
parser.add_option('--rename', metavar='NEW_NAME',
                   help='Rename the given client')
parser.add_option('--list', action='store_true',
                   default=False, help='List the available client')

group = optparse.OptionGroup(parser, "Setters",
                             "These options are used for setting various values.  "
                             "Use an empty string, e.g. '' to unset the value for strings variables.  "
                             "You should be aware that no sanity checking is done here, so it is quite possible "
                             "to break your configuration while using them.  Caveat emptor."
                             )

for key in Client.NULL_KEYS: group.add_option('--' + key)
group.add_option('--' + FDPORT)
group.add_option('--' + AUTOPRUNE)
group.add_option('--' + MAXIMUMCONCURRENTJOBS)
group.add_option('--' + PKIENCRYPTION)
group.add_option('--' + PKISIGNATURES)         


parser.add_option_group(group)

(args, client_arg) = parser.parse_args()
bacula = Bacula_Factory()        # Instantiate our DB connection thingy

if args.delete and (args.create or args.set or args.rename):
    bacula.die('','If you delete then there is no sense in doing anything else.',
               "You didn't think this one out very well, did you?.")

# }}}

if args.list:
    print(bacula.formatted_query_result('select name from %s order by name' % CLIENTS, infix='\n'))
    if not client_arg: exit()
if not client_arg:
    parser.print_help()
    exit()

s = Client()
if args.create: s._set_name(client_arg[0])

s.search(client_arg[0])
if not s[ID]:
    print('No such client: %s' % client_arg[0])
    exit()

if args.delete:
    s.delete()
    print('Deleted client:', client_arg[0])
    exit()                      # Nothing to print out now
    
if args.rename: s.change_name(args.rename)

generic_option_processor(s,
                         args,
                         [x for x in Client.NULL_KEYS if not x in [AUTOPRUNE, PKIENCRYPTION, PKISIGNATURES]])

if not args.autoprune == None: s._set(AUTOPRUNE, args.autoprune, True)
if not args.pkisignatures == None: s._set(PKISIGNATURES, args.pkisignatures, True)
if not args.pkiencryption == None: s._set(PKIENCRYPTION, args.pkiencryption, True)

print('Director config\n', s, '\n', 'File Daemon config\n', s.fd())
if s[NOTES]:
    print("\nNotes:", s[NOTES])
exit()
